#include <stdio.h>
#include <windows.h>
#include <math.h>
#include <stdlib.h>
#include <glut.h>
#include <GL/gl.h>
#include <time.h>
#include <iostream>
#include <MMSystem.h>
using namespace std;
float translate_x = 0.0;
float translate_y = 0.0;
float translate_z = 0.0;
static GLfloat spin = 0.0;
float spin_x = 1.0;
float spin_y = 0.0;
float spin_z = 0.0;
int day = 1;
bool rain = false;
bool carv = false;
bool planev = false;
int flag = 0;
bool help = false;
void delay(unsigned int mseconds)
{
	clock_t goal = mseconds + clock();
	while (goal > clock());
}
void myInit(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
	glColor3f(0.0f, 0.0f, 0.0f);
	glPointSize(2.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 1024, 0.0, 768.0);
}
void *currentfont;
void setFont(void *font)
{
	currentfont = font;
}
void drawstring(float x, float y, float z, const char *string)
{
	const char *c;
	glRasterPos3f(x, y, z);

	for (c = string; *c != '\0'; c++)
	{
		glutBitmapCharacter(currentfont, *c);
	}
}
void Full(int r, int g, int b)
{
	glColor3ub(r, g, b);
	glBegin(GL_QUADS);
	glVertex3i(-200, 0, 0);
	glVertex3i(1324, 0, 0);
	glVertex3i(1324, 768, 0);
	glVertex3i(-200, 768, 0);
}
void Road()
{
	glColor3ub(78, 78, 78);
	glBegin(GL_QUADS);
	glVertex3i(-200, 0, 0);
	glVertex3i(1324, 0, 0);
	glVertex3i(1324, 120, 0);
	glVertex3i(-200, 120, 0);
	glEnd();
}
void roadBorder()
{
	glColor3ub(255, 255, 255);
	glBegin(GL_QUADS);
	glVertex3i(-200, 120, 0);
	glVertex3i(1324, 120, 0);
	glVertex3i(1324, 130, 0);
	glVertex3i(-200, 130, 0);
	glEnd();
}
void TranslateRoadLine(int x, int y, int z)
{
	x -= 50;
	if (x <= 0)
	{
		x = 1050;
	}
	glutPostRedisplay();
	Sleep(50);
}
void RoadLine(int x, int y, int z)
{
	glColor3ub(255, 255, 255);
	glBegin(GL_QUADS);
	glVertex3i(x, y, z);
	glVertex3i(x + 50, y, z);
	glVertex3i(x + 50, y + 10, z);
	glVertex3i(x, y + 10, z);
	glEnd();
}
void tprint(int x, int y, int z, const char *string)
{
	glRasterPos2f(x, y);
	int len = (int)strlen(string);
	for (int i = 0; i < len; i++)
	{
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, string[i]);
	}
}
void ttprint(int x, int y, int z, const char *string)
{
	glRasterPos2f(x, y);
	int len = (int)strlen(string);
	for (int i = 0; i < len; i++)
	{
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, string[i]);
	}
}
void playGround(int r, int g, int b)
{
	glColor3ub(r, g, b);
	glBegin(GL_QUADS);
	glVertex3i(-200, 120, 0);
	glVertex3i(1324, 120, 0);
	glVertex3i(1324, 260, 0);
	glVertex3i(-200, 260, 0);
	glEnd();
	glColor3ub(94, 65, 33);
	glBegin(GL_QUADS);
	glVertex3i(-200, 250, 0);
	glVertex3i(1324, 250, 0);
	glVertex3i(1324, 260, 0);
	glVertex3i(-200, 260, 0);
}
void lampPost(int x, int y, int z)
{
	glColor3ub(222, 250, 50);
	glBegin(GL_QUADS);
	glVertex3i(x, y, z);
	glVertex3i(x + 7, y, z);
	glVertex3i(x + 7, y + 100, z);
	glVertex3i(x, y + 100, z);
	glEnd();
	glColor3ub(222, 250, 50);
	glBegin(GL_QUADS);
	glVertex3i(x, y + 93, z);
	glVertex3i(x + 70, y + 93, z);
	glVertex3i(x + 70, y + 100, z);
	glVertex3i(x, y + 100, z);
	glEnd();
	glColor3ub(222, 250, 50);
	glBegin(GL_TRIANGLES);
	glVertex3i(x + 50, y + 85, z);
	glVertex3i(x + 70, y + 85, z);
	glVertex3i(x + 60, y + 93, z);
	glEnd();
}
void Light(int x, int y, int z)
{
	glColor3ub(200, 200, 200);
	glBegin(GL_QUADS);
	glVertex3i(x + 9, y, z);
	glVertex3i(x + 110, y, z);
	glVertex3i(x + 70, y + 85, z);
	glVertex3i(x + 50, y + 85, z);
	glEnd();
}
void Tree(int x, int y, int z)
{
	glColor3ub(90, 70, 60);
	glBegin(GL_QUADS);
	glVertex3i(x, y, z);
	glVertex3i(x + 7, y, z);
	glVertex3i(x + 7, y + 20, z);
	glVertex3i(x, y + 20, z);
	glEnd();
	glColor3ub(14, 120, 14);
	glBegin(GL_TRIANGLES);
	glVertex3i(x - 15, y + 19, z);
	glVertex3i(x + 22, y + 19, z);
	glVertex3f(x + 3.5, y + 45, z);
	glEnd();
	glBegin(GL_TRIANGLES);
	glVertex3i(x - 10, y + 35, z);
	glVertex3i(x + 17, y + 35, z);
	glVertex3f(x + 3.5, y + 60, z);
	glEnd();
}
void Windows(int x, int y, int z)
{
	glColor3ub(255, 255, 255);
	glBegin(GL_QUADS);
	glVertex3i(x, y, z);
	glVertex3i(x + 60, y, z);
	glVertex3i(x + 60, y + 70, z);
	glVertex3i(x, y + 70, z);
	glEnd();
	glColor3ub(0, 0, 0);
	glBegin(GL_QUADS);
	glVertex3i(x + 7, y + 7, z);
	glVertex3i(x + 27, y + 7, z);
	glVertex3i(x + 27, y + 33, z);
	glVertex3i(x + 7, y + 33, z);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(x + 33, y + 7, z);
	glVertex3i(x + 54, y + 7, z);
	glVertex3i(x + 54, y + 33, z);
	glVertex3i(x + 33, y + 33, z);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(x + 7, y + 40, z);
	glVertex3i(x + 27, y + 40, z);
	glVertex3i(x + 27, y + 63, z);
	glVertex3i(x + 7, y + 63, z);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(x + 33, y + 40, z);
	glVertex3i(x + 54, y + 40, z);
	glVertex3i(x + 54, y + 63, z);
	glVertex3i(x + 33, y + 63, z);
	glEnd();
}
void FirstBuilding(int r, int g, int b)
{
	int windowsXf = -310, windowsXl = 556;
	glColor3ub(r, g, b);
	glBegin(GL_QUADS);
	glVertex3i(-200, 260, 0);
	glVertex3i(396, 260, 0);
	glVertex3i(396, 375, 0);
	glVertex3i(-200, 375, 0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(628, 260, 0);
	glVertex3i(1324, 260, 0);
	glVertex3i(1324, 375, 0);
	glVertex3i(628, 375, 0);
	glEnd();
	glColor3ub(48, 49, 54);
	glBegin(GL_QUADS);
	glVertex3i(396, 260, 0);
	glVertex3i(628, 260, 0);
	glVertex3i(628, 400, 0);
	glVertex3i(396, 400, 0);
	glEnd();
	for (int i = 6; i >= 0; i--)
	{
		windowsXf += 90;
		Windows(windowsXf, 280, 0);
	}
	for (int i = 7; i >= 0; i--)
	{
		windowsXl += 90;
		Windows(windowsXl, 280, 0);
	}
}
void Cross(int x, int y, int z)
{
	glColor3b(10, 150, 12);
	glBegin(GL_QUADS);
	glVertex3i(x, y, z);
	glVertex3i(x + 2, y, z);
	glVertex3i(x + 2, y + 15, z);
	glVertex3i(x, y + 15, z);
	glEnd();
}
void TinShade()
{
	glColor3ub(233, 235, 238);
	glBegin(GL_QUADS);
	glVertex3i(-200, 375, 0);
	glVertex3i(396, 375, 0);
	glVertex3i(396, 390, 0);
	glVertex3i(-200, 390, 0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(628, 375, 0);
	glVertex3i(1324, 375, 0);
	glVertex3i(1324, 390, 0);
	glVertex3i(628, 390, 0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(386, 400, 0);
	glVertex3i(638, 400, 0);
	glVertex3i(638, 420, 0);
	glVertex3i(386, 420, 0);
	glEnd();
	glColor3ub(42, 85, 6);
	glBegin(GL_QUADS);
	glVertex3i(-200, 390, 0);
	glVertex3i(396, 390, 0);
	glVertex3i(396, 395, 0);
	glVertex3i(-200, 395, 0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(628, 390, 0);
	glVertex3i(1324, 390, 0);
	glVertex3i(1324, 395, 0);
	glVertex3i(628, 395, 0);
	glEnd();
	glColor3ub(140, 140, 130);
	glBegin(GL_QUADS);
	glVertex3i(0, 395, 0);
	glVertex3i(125, 395, 0);
	glVertex3i(120, 410, 0);
	glVertex3i(0, 410, 0);
	glEnd();
	int CrossX = 0;
	for (int i = 15; i > 0; i--)
	{
		Cross(CrossX, 395, 0);
		CrossX += 8;
	}
	glColor3b(10, 150, 12);
	glBegin(GL_QUADS);
	glVertex3i(0, 400, 0);
	glVertex3i(125, 400, 0);
	glVertex3i(122, 402, 0);
	glVertex3i(0, 402, 0);
	glEnd();
}
void Pillar(int x, int y, int z)
{
	glColor3ub(166, 166, 166);
	glBegin(GL_QUADS);
	glVertex3i(x, y, z);
	glVertex3i(x + 3, y, z);
	glVertex3i(x + 3, y + 45, z);
	glVertex3i(x, y + 45, z);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(x + 15, y, z);
	glVertex3i(x + 18, y, z);
	glVertex3i(x + 18, y + 40, z);
	glVertex3i(x + 15, y + 40, z);
	glEnd();
}
void VerticalLine(int x, int y, int z)
{
	for (int i = 10; i >= 0; i--)
	{
		glColor3ub(166, 166, 166);
		glBegin(GL_QUADS);
		glVertex3i(x, y, 0);
		glVertex3i(x + 2, y, 0);
		glVertex3i(x + 2, y + 35, 0);
		glVertex3i(x, y + 35, 0);
		glEnd();
		x += 10;
	}
}
void HorizontalLine(int x, int y, int z)
{
	for (int i = 3; i >= 0; i--)
	{
		glColor3ub(166, 166, 166);
		glBegin(GL_QUADS);
		glVertex3i(x, y, 0);
		glVertex3i(x + 105, y, 0);
		glVertex3i(x + 105, y + 2, 0);
		glVertex3i(x, y + 2, 0);
		glEnd();
		y += 10;
	}
}
void MiddleTop()
{
	glColor3ub(205, 205, 205);
	glBegin(GL_QUADS);
	glVertex3i(300, 430, 0);
	glVertex3i(405, 430, 0);
	glVertex3i(405, 450, 0);
	glVertex3i(300, 450, 0);
	glEnd();
	glColor3ub(255, 0, 0);
	glColor3ub(166, 166, 166);
	glBegin(GL_QUADS);
	glVertex3i(300, 395, 0);
	glVertex3i(303, 395, 0);
	glVertex3i(303, 430, 0);
	glVertex3i(300, 430, 0);
	glEnd();
	glColor3ub(166, 166, 166);
	glBegin(GL_QUADS);
	glVertex3i(402, 420, 0);
	glVertex3i(405, 420, 0);
	glVertex3i(405, 430, 0);
	glVertex3i(402, 430, 0);
	glEnd();
	VerticalLine(300, 395, 0);
	HorizontalLine(300, 395, 0);
	glColor3ub(5, 5, 5);
	glBegin(GL_QUADS);
	glVertex3i(300, 427, 0);
	glVertex3i(405, 427, 0);
	glVertex3i(405, 431, 0);
	glVertex3i(300, 431, 0);
	glEnd();
}
void reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(100.0f, (GLfloat)w / (GLfloat)h, 1.0f, 100.0f);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}
void drawFilledCircle(GLfloat x, GLfloat y, GLfloat z, GLfloat radius, int color) {
	int i;
	int triangleAmount = 50;
	GLfloat twicePi = 2.0f * 3.1416;
	int counter = 0;
	glColor3ub(color, color, color);
	glBegin(GL_TRIANGLE_FAN);
	glVertex3f(x, y, z);
	for (i = 0; i <= triangleAmount; i++) {
		counter += 1;
		glVertex3f(
			x + (radius * cos(i *  twicePi / triangleAmount)),
			y + (radius * sin(i * twicePi / triangleAmount)), z
		);
		if (counter < 25)
		{
			color += 3;
			glColor3ub(color, color, color);
		}
		else
		{
			color -= 3;
			glColor3ub(color, color, color);
		}
	}
	glEnd();
}
void otherCircle(GLfloat x, GLfloat y, GLfloat z, GLfloat radius, int r, int g, int b)
{
	int i;
	int triangleAmount = 20;
	GLfloat twicePi = 2.0f * 3.1416;
	int counter = 0;
	glColor3ub(r, g, b);
	glBegin(GL_TRIANGLE_FAN);
	glVertex3f(x, y, z);
	for (i = 0; i <= triangleAmount; i++) {
		counter += 1;
		glVertex3f(
			x + (radius * cos(i *  twicePi / triangleAmount)),
			y + (radius * sin(i * twicePi / triangleAmount)), z
		);
	}
	glEnd();
}
void car()
{
	static float a = -400.0f;
	if (a >= 1324)
	{
		a = -400.0f;
	}
	else
	{
		a += 0.2f;
	}
	glColor3ub(255, 0, 0);
	glPushMatrix();
	glTranslatef(a, 0, 0);
	glBegin(GL_QUADS);
	glVertex3i(20, 40, 0);
	glVertex3i(220, 40, 0);
	glVertex3i(220, 80, 0);
	glVertex3i(20, 80, 0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(40, 80, 0);
	glVertex3i(200, 80, 0);
	glVertex3i(160, 110, 0);
	glVertex3i(80, 110, 0);
	glEnd();
	glColor3ub(0, 0, 0);
	glBegin(GL_QUADS);
	glVertex3i(115, 80, 0);
	glVertex3i(190, 80, 0);
	glVertex3i(155, 105, 0);
	glVertex3i(115, 105, 0);
	glEnd();
	glColor3ub(0, 0, 0);
	glBegin(GL_QUADS);
	glVertex3i(45, 80, 0);
	glVertex3i(110, 80, 0);
	glVertex3i(110, 105, 0);
	glVertex3i(80, 105, 0);
	glEnd();
	glColor3ub(0, 0, 0);
	glBegin(GL_QUADS);
	glVertex3i(115, 70, 0);
	glVertex3i(135, 70, 0);
	glVertex3i(135, 75, 0);
	glVertex3i(115, 75, 0);
	glEnd();
	glColor3ub(0, 0, 0);
	glBegin(GL_QUADS);
	glVertex3i(45, 70, 0);
	glVertex3i(65, 70, 0);
	glVertex3i(65, 75, 0);
	glVertex3i(45, 75, 0);
	glEnd();
	otherCircle(30.0f, 60.0f, 0.0f, 19.0f, 255, 0, 0);
	otherCircle(210.0f, 60.0f, 0.0f, 19.0f, 255, 0, 0);
	glColor3ub(250, 250, 0);
	glBegin(GL_QUADS);
	glVertex3i(225, 55, 0);
	glVertex3i(230, 55, 0);
	glVertex3i(230, 65, 0);
	glVertex3i(225, 65, 0);
	glEnd();
	if (day == 2)
	{
		glColor3ub(200, 200, 200);
		glBegin(GL_QUADS);
		glVertex3i(230, 55, 0);
		glVertex3i(280, 20, 0);
		glVertex3i(280, 95, 0);
		glVertex3i(225, 65, 0);
		glEnd();
	}
	otherCircle(60.0f, 40.0f, 0.0f, 18.0f, 0, 0, 0);
	otherCircle(60.0f, 40.0f, 0.0f, 10.0f, 137, 137, 137);
	otherCircle(170.0f, 40.0f, 0.0f, 18.0f, 0, 0, 0);
	otherCircle(170.0f, 40.0f, 0.0f, 10.0f, 137, 137, 137);
	glPopMatrix();
	glutPostRedisplay();
}
void truck()
{
	static float a = 650.0f;
	if (a <= -1300)
	{
		a = 550.0f;
	}
	else
	{
		a -= 0.2f;
	}
	glColor3ub(0, 0, 255);
	glPushMatrix();
	glTranslatef(a, 0, 0);
	otherCircle(780.0f, 130.0f, 0.0f, 41.0f, 0, 0, 255);
	glBegin(GL_QUADS);
	glVertex3i(750, 90, 0);
	glVertex3i(1000, 90, 0);
	glVertex3i(1000, 140, 0);
	glVertex3i(750, 140, 0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(750, 140, 0);
	glVertex3i(860, 140, 0);
	glVertex3i(860, 160, 0);
	glVertex3i(750, 160, 0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(750, 160, 0);
	glVertex3i(860, 160, 0);
	glVertex3i(860, 190, 0);
	glVertex3i(800, 190, 0);
	glEnd();
	glColor3ub(0, 0, 0);
	glBegin(GL_QUADS);
	glVertex3i(760, 160, 0);
	glVertex3i(855, 160, 0);
	glVertex3i(855, 185, 0);
	glVertex3i(800, 185, 0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(840, 145, 0);
	glVertex3i(855, 145, 0);
	glVertex3i(855, 150, 0);
	glVertex3i(840, 150, 0);
	glEnd();
	glColor3ub(0, 0, 0);
	glBegin(GL_LINES);
	glVertex3i(860, 160, 0);
	glVertex3i(1000, 160, 0);
	glVertex3i(860, 159, 0);
	glVertex3i(1000, 159, 0);
	glVertex3i(1000, 160, 0);
	glVertex3i(1000, 140, 0);
	glVertex3i(990, 160, 0);
	glVertex3i(990, 140, 0);
	glVertex3i(980, 160, 0);
	glVertex3i(980, 140, 0);
	glVertex3i(970, 160, 0);
	glVertex3i(970, 140, 0);
	glVertex3i(960, 160, 0);
	glVertex3i(960, 140, 0);
	glVertex3i(950, 160, 0);
	glVertex3i(950, 140, 0);
	glVertex3i(940, 160, 0);
	glVertex3i(940, 140, 0);
	glVertex3i(930, 160, 0);
	glVertex3i(930, 140, 0);
	glVertex3i(920, 160, 0);
	glVertex3i(920, 140, 0);
	glVertex3i(910, 160, 0);
	glVertex3i(910, 140, 0);
	glVertex3i(900, 160, 0);
	glVertex3i(900, 140, 0);
	glVertex3i(890, 160, 0);
	glVertex3i(890, 140, 0);
	glVertex3i(880, 160, 0);
	glVertex3i(880, 140, 0);
	glVertex3i(870, 160, 0);
	glVertex3i(870, 140, 0);
	glEnd();
	otherCircle(800.0f, 90.0f, 0.0f, 21.0f, 0, 0, 0);
	otherCircle(800.0f, 90.0f, 0.0f, 15.0f, 131, 131, 131);
	otherCircle(950.0f, 90.0f, 0.0f, 21.0f, 0, 0, 0);
	otherCircle(950.0f, 90.0f, 0.0f, 15.0f, 131, 131, 131);
	glColor3ub(255, 0, 0);
	glBegin(GL_QUADS);
	glVertex3i(1000, 110, 0);
	glVertex3i(1005, 110, 0);
	glVertex3i(1005, 120, 0);
	glVertex3i(1000, 120, 0);
	glEnd();
	glColor3ub(255, 255, 0);
	glBegin(GL_QUADS);
	glVertex3i(740, 90, 0);
	glVertex3i(750, 90, 0);
	glVertex3i(750, 102, 0);
	glVertex3i(740, 102, 0);
	glEnd();
	if (day == 2)
	{
		glColor3ub(200, 200, 200);
		glBegin(GL_QUADS);
		glVertex3i(680, 60, 0);
		glVertex3i(740, 90, 0);
		glVertex3i(740, 102, 0);
		glVertex3i(680, 130, 0);
		glEnd();
	}
	glColor3ub(255, 255, 255);
	ttprint(860, 110, 0, "GAT");
	glPopMatrix();
	glutPostRedisplay();
}
void plane()
{
	static float a = -300.0f;
	static float b = 0.0f;
	if (a >= 1324)
	{
		a = -300.0f;
		b = 0.0f;
	}
	else
	{
		a += 0.1f;
		b += 0.005f;
	}
	glColor3ub(66, 66, 66);
	glPushMatrix();
	glTranslatef(a, b, 0);
	glBegin(GL_QUADS);
	glVertex3i(30, 700, 0);
	glVertex3i(100, 700, 0);
	glVertex3i(100, 715, 0);
	glVertex3i(35, 715, 0);
	glEnd();
	glBegin(GL_TRIANGLES);
	glVertex3i(100, 700, 0);
	glVertex3i(110, 707, 0);
	glVertex3i(100, 715, 0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(37, 715, 0);
	glVertex3i(57, 715, 0);
	glVertex3i(40, 730, 0);
	glVertex3i(20, 730, 0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(70, 715, 0);
	glVertex3i(80, 715, 0);
	glVertex3i(60, 735, 0);
	glVertex3i(50, 735, 0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3i(70, 700, 0);
	glVertex3i(80, 700, 0);
	glVertex3i(60, 680, 0);
	glVertex3i(50, 680, 0);
	glEnd();
	glColor3ub(255, 255, 255);
	glBegin(GL_POINTS);
	glVertex3i(95, 710, 0);
	glVertex3i(90, 710, 0);
	glVertex3i(85, 710, 0);
	glVertex3i(80, 710, 0);
	glVertex3i(75, 710, 0);
	glVertex3i(70, 710, 0);
	glVertex3i(65, 710, 0);
	glVertex3i(60, 710, 0);
	glVertex3i(55, 710, 0);
	glEnd();
	glPopMatrix();
	glutPostRedisplay();
}
void clouds(float x, float y, float z, int m, int l, int n)
{
	static float a = -1300.0f;
	if (a >= 1324)
	{
		a = -1300.0f;
	}
	else
	{
		a += 0.005f;
	}
	glPushMatrix();
	glTranslatef(a, 0, 0);
	otherCircle(x, y, z, 50.0f, m, l, n);
	otherCircle(x - 50, y, z, 40.0f, m, l, n);
	otherCircle(x + 50, y, z, 40.0f, m, l, n);
	glPopMatrix();
	glutPostRedisplay();
}
void circleLine()
{
	glColor3ub(240, 240, 240);
	glBegin(GL_LINES);
	glLineWidth(5.0f);
	glVertex3i(780, 500, 0);
	glVertex3i(1120, 500, 0);
	glVertex3i(788, 550, 0);
	glVertex3i(1112, 550, 0);
	glVertex3i(812, 600, 0);
	glVertex3i(1088, 600, 0);
	glVertex3i(788, 450, 0);
	glVertex3i(1112, 450, 0);
	glVertex3i(812, 400, 0);
	glVertex3i(1088, 400, 0);
	glEnd();
}
void rainf()
{
	int x = 0;
	int y = 778;
	static float a = -760.0f;
	if (a <= -768)
	{
		a = -760.0f;

	}
	else
	{
		a -= 0.5f;
	}
	glColor3ub(255, 255, 255);
	glPushMatrix();
	glTranslatef(0.0f, a, 0.0f);
	glBegin(GL_LINES);
	for (int i = 500; i >= 0; i--)
	{
		for (int j = 0; j <= i; j++)
		{
			glVertex3i(x, y, 0);
			glVertex3i(x + 3, y + 10, 0);
			x += rand() % 1050;
		}
		y += rand() % 15;
		x = 0;

	}
	glEnd();
	glPopMatrix();
	glutPostRedisplay();

}
void nightMode()
{
	int roadlineX = -300;
	int treeXf = -350;
	int treeXl = 528;
	int lamp = -350;
	int light = -350;
	Full(55, 55, 55);
	Road();
	for (int i = 55; i > 0; i--)
	{
		roadlineX += 100;
		RoadLine(roadlineX, 55, 0);
	}
	//otherCircle(300.0f, 670.0f, 0.0f, 32.0f, 250, 250, 250);
	clouds(-450.0f, 670.0f, 0.0f, 173, 173, 133);
	clouds(-150.0f, 630.0f, 0.0f, 173, 173, 133);
	clouds(150.0f, 670.0f, 0.0f, 173, 173, 133);
	if (planev)
	{
		plane();
	}
	clouds(450.0f, 600.0f, 0.0f, 205, 205, 177);
	clouds(750.0f, 690.0f, 0.0f, 173, 173, 133);
	clouds(1050.0f, 680.0f, 0.0f, 173, 173, 133);
	playGround(42, 55, 17);
	MiddleTop();
	drawFilledCircle(950.0f, 500.0f, 0.0f, 170.0f, 55.0f);
	FirstBuilding(56, 46, 47);
	for (int i = 5; i >= 0; i--)
	{
		treeXf += 120;
		Tree(treeXf, 260, 0);
	}
	for (int i = 5; i >= 0; i--)
	{
		treeXl += 120;
		Tree(treeXl, 260, 0);
	}
	TinShade();
	for (int i = 9; i >= 0; i--)
	{
		lamp += 310;
		lampPost(lamp, 130, 0);
	}
	for (int i = 9; i >= 0; i--)
	{
		light += 310;
		Light(light, 130, 0);
	}
	roadBorder();
	TinShade();
	circleLine();
	glColor3ub(0, 0, 255);
	tprint(330, 433, 0, "GAT");
	if (carv)
	{
		truck();
		car();
	}
	glPopMatrix();
	if (rain)
	{
		rainf();
	}
}
void dayMode()
{
	int roadlineX = -300;
	int treeXf = -350;
	int treeXl = 528;
	int lamp = -350;
	int light = -350;
	Full(131, 183, 231);
	Road();
	for (int i = 55; i > 0; i--)
	{
		roadlineX += 100;
		RoadLine(roadlineX, 55, 0);
	}
	//otherCircle(300.0f, 670.0f, 0.0f, 32.0f, 255, 165, 0);
	clouds(-100.0f, 630.0f, 0.0f, 250, 250, 250);
	clouds(150.0f, 670.0f, 0.0f, 250, 250, 250);
	if (planev)
	{
		plane();
	}
	clouds(450.0f, 600.0f, 0.0f, 250, 250, 250);
	clouds(750.0f, 690.0f, 0.0f, 250, 250, 250);
	clouds(1050.0f, 710.0f, 0.0f, 250, 250, 250);
	playGround(42, 95, 17);
	MiddleTop();
	drawFilledCircle(950.0f, 500.0f, 0.0f, 170.0f, 137.0f);
	FirstBuilding(134, 89, 45);
	for (int i = 5; i >= 0; i--)
	{
		treeXf += 120;
		Tree(treeXf, 260, 0);
	}
	for (int i = 5; i >= 0; i--)
	{
		treeXl += 120;
		Tree(treeXl, 260, 0);
	}
	TinShade();
	for (int i = 9; i >= 0; i--)
	{
		lamp += 310;
		lampPost(lamp, 130, 0);
	}
	roadBorder();
	TinShade();
	circleLine();
	glColor3ub(0, 0, 255);
	tprint(330, 433, 0, "GAT");
	if (carv)
	{
		truck();
		car();
	}
	glPopMatrix();
	if (rain)
	{
		rainf();
	}
}
void startscreen(void)
{
	setFont(GLUT_BITMAP_TIMES_ROMAN_24);
	glClearColor(0.000, 0.000, 0.000, 0);
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(0, 1, 0);
	drawstring(200.0, 700.0, 0.0, "GLOBAL ACADEMY OF TECHNOLOGY-BANGALORE");
	glColor3f(0, 0, 1);
	drawstring(200, 650, 0.0, "COMPUTER SCIENCE AND ENGINEERING");
	glColor3f(0.7, 0.7, 0.7);
	drawstring(450, 530, 0.0, "PROJECT ON");
	drawstring(250, 500, 0.0, "COMPUTER GRAPHICS: COLLEGE CAMPUS VIEW");
	glColor3f(1, 0.5, 0);
	drawstring(100, 400, 0.0, "SUBMITTED BY:");
	glColor3f(1, 1, 1);
	drawstring(100, 370, 0.0, "AYUSH DHAR                          (1GA16CS034)");
	drawstring(400, 80, 0.0, "PRESS ENTER TO START");
	glFlush();
}
void controlsScreen()
{
	setFont(GLUT_BITMAP_TIMES_ROMAN_24);
	glClearColor(0.000, 0.000, 0.000, 0);
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(0.596, 0.984, 0.596);
	drawstring(370.0, 700.0, 0.0, "INSTRUCTIONS");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(250.0, 640.0, 0.0, "DAY MODE");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(600.0, 640.0, 0.0, "PRESS 'D'");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(250.0, 600.0, 0.0, "NIGHT MODE");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(600.0, 600.0, 0.0, "PRESS 'N'");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(250.0, 560.0, 0.0, "CAR MOVING");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(600.0, 560.0, 0.0, "PRESS 'C'");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(250.0, 520.0, 0.0, "RAIN MODE");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(600.0, 520.0, 0.0, "PRESS 'R'");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(250.0, 480.0, 0.0, "NO RAIN");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(600.0, 480.0, 0.0, "PRESS 'E'");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(250.0, 440.0, 0.0, "PLANE MOVEMENT");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(600.0, 440.0, 0.0, "PRESS 'P'");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(250.0, 400.0, 0.0, "Help");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(600.0, 400.0, 0.0, "PRESS 'H'");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(250.0, 360.0, 0.0, "EXIT");
	glColor3f(1.000, 0.980, 0.941);
	drawstring(600.0, 360.0, 0.0, "PRESS 'ESC'");
	glColor3f(0.596, 0.984, 0.596);
	drawstring(360.0, 200.0, 0.0, "NOW PRESS ENTER");
	glFlush();
}
void display()
{
	glPushMatrix();
	glTranslatef(translate_x, translate_y, translate_z);
	if (day == 2)
	{
		nightMode();
	}
	else if (day == 1)
	{
		dayMode();
	}
	glFlush();
	glutSwapBuffers();
}
void myDisplay()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	if (flag == 0)
	{
		startscreen();
	}
	if (flag == 1)
		controlsScreen();
	if (flag > 1)
		display();
	glFlush();
	glutSwapBuffers();
}
void keyboard(unsigned char key, int x, int y)
{
	if (key == 'd')
	{
		day = 1;
	}
	else if (key == 'n')
	{
		day = 2;
	}
	else if (key == 'r')
	{
		rain = true;
	}
	else if (key == 'e')
	{
		rain = false;
	}
	else if (key == 'c')
	{
		carv = true;
	}
	else if (key == 'v')
	{
		carv = false;
	}
	else if (key == 'p')
	{
		planev = true;
	}
	else if (key == 'o')
	{
		planev = false;
	}
	else if (key == 13)
	{
		flag++;
		myDisplay();
	}
	else if (key == 'h')
	{
		flag = 1;
		myDisplay();
	}
	else if (key == 27)
	{
		exit(0);
	}
}
void SpecialKeys(int key, int x, int y)
{
	switch (key)
	{
	case GLUT_KEY_LEFT:
		if (translate_x < 200)
		{
			translate_x += 5;
			glutPostRedisplay();
		}
		break;
	case GLUT_KEY_RIGHT:
		if (translate_x > -300)
		{
			translate_x -= 5;
			glutPostRedisplay();
		}
		break;
	case GLUT_KEY_UP:
		spin -= 5;
		if (spin >= 360)
		{
			spin = 0;
		}
		glutPostRedisplay();
		break;
	case GLUT_KEY_DOWN:
		spin += 5;
		if (spin <= 360)
		{
			spin = 0;
		}
		glutPostRedisplay();
		break;
	}
}
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(1024, 768);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("GAT");
	myInit();
	glutDisplayFunc(myDisplay);
	glutKeyboardFunc(keyboard);
	glutSpecialFunc(SpecialKeys);
	glutMainLoop();
	return 0;
}